<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Welcome To Myblog</title>
    <link>https://czxcw.github.io/</link>
    <description>Recent content on Welcome To Myblog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 12 Sep 2023 10:52:14 +0800</lastBuildDate><atom:link href="https://czxcw.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>java学习笔记</title>
      <link>https://czxcw.github.io/post/blog03/</link>
      <pubDate>Tue, 12 Sep 2023 10:52:14 +0800</pubDate>
      
      <guid>https://czxcw.github.io/post/blog03/</guid>
      <description>传递基本类型 在主方法中调用类中方法，会开辟一个新栈 类中的基本类型参数不会改变主方法中的实参（==复制了一份实参传递进去==） 编程思想 化繁为简，先死后活 找出不正确的条件，过关斩将（校验） 一段代码一个小功能 尽量复用代码 传递地址（引用类型） ==传递的是一个地址== 类中方法改变其引用类型的值，主方法中的值也改变（地址没变），改变的是他的本体 在类中调用其他类中的方法 类的==实际内存空间开辟在堆中==，传递的形参为==类在栈中的地址==（引用类型） 调用方法时，开辟新栈，在新栈中的==形参即局部变量与主方法中的实参无关== 引用数据类型指向堆中数据，实参指向它，形参也指向它 若在形参指向它时，改变堆中数据，实参指向的数据也会改变 若形参指向NULL，实参的指向不变 若形参指向一个新的空间，实参的指向不变 ==实参和形参时相互独立的==
Java中的数据类型 ![Java数据类型](C:\Users\20288\Pictures\Screenshots\屏幕截图 2023-08-19 100326.png &amp;ldquo;Java数据类型&amp;rdquo;)
递归调用 谁调用谁返回（return）
递归中使用的是引用类型的变量，就会共享引用类型的数据（？）
使用递归的关键
找到递归的规律
==找到结束递归的条件，使用递归的规律逼近结束递归的条件==
/* 递归的中的逆向思维 1. 递归函数的定义 2. 基础情况的处理 3. 递归调用 4. 递推到当前层 */ public int recursion(int n)//递归函数的定义 { if(n == 1)//基础情况的处理 { return 1; } tmp = recursion(n-1);//递归调用 return tmp * n;//递推到当前层 } // 逆向思维，由未知逐渐推向已知 //从最基础的已知答案 按照一定的规律 逐渐获得更高一层的答案 直到最高层 作用域及其细节 //作用域的练习 public class VarScope { public static void main(String[] args) { Person p = new Person(); p.</description>
    </item>
    
    <item>
      <title>递归思想</title>
      <link>https://czxcw.github.io/post/blog02/</link>
      <pubDate>Sun, 20 Aug 2023 15:54:58 +0800</pubDate>
      
      <guid>https://czxcw.github.io/post/blog02/</guid>
      <description>递归 递归中使用的是引用类型的变量，就会共享引用类型的数据（？） /* 递归的中的逆向思维 1. 递归函数的定义 2. 基础情况的处理 3. 递归调用 4. 递推到当前层 */ public int recursion(int n)//递归函数的定义 { if(n == 1)//基础情况的处理 { return 1; } tmp = recursion(n-1);//递归调用 return tmp * n;//递推到当前层 } // 逆向思维，由未知逐渐推向已知 //从最基础的已知答案 按照一定的规律 逐渐获得更高一层的答案 直到最高层 汉诺塔问题 用冰箱装大象需要3步
打开冰箱 把大象塞进冰箱 关上冰箱 public class HanoiTower { public static void main(String[] args) { Tower t = new Tower(); t.move(2, &amp;#39;A&amp;#39;, &amp;#39;B&amp;#39;, &amp;#39;C&amp;#39;); } } class Tower { public void move(int nums, char a, char b, char c) { if(nums == 1) System.</description>
    </item>
    
    <item>
      <title>用Hugo搭建个人博客实践</title>
      <link>https://czxcw.github.io/post/blog01/</link>
      <pubDate>Wed, 16 Aug 2023 20:04:46 +0800</pubDate>
      
      <guid>https://czxcw.github.io/post/blog01/</guid>
      <description>安装Hugo（Windows） 在GitHub上下载压缩包（最慢的方法）(==因为不支持SCSS,需要安装拓展版本==) 在E盘创建一个名为hugo的文件，在hugo文件下创建一个bin文件 将下载的压缩包解压到bin文件中 配置环境变量，在系统变量path中添加bin文件的路径 使用cmd或者powershell，输入hugo help和hugo version ,查看是否安装成功 在E盘中用powershell 输入hugo new site myblog,创建一个个人博客。 安装Git 使用powershell的管理员模式，不要使用cmd或者Windows powershell 在hugo的官网中用Git拉取一个主题 部署到远端Github上（GitHub需要与git绑定） cmd也可以启动hugo，不需要是用管理员模式（第四次启动尝试) 终端需要管理员模式，因为使用git需要管理员模式才行 Hugo的终端指令 - hugo new post/blog01.md //新建一篇文章 - hugo server --theme=m10c -D //本地启动项目 - //将个人博客部署的到远端github - hugo --theme=m10c --baseURL=&amp;#34;https://czxcw.github.io&amp;#34; -D//会在根目录下生成一个public文件 - git init //让public文件成为本地仓库，初始化一个git仓库 - git remote add origin https://github.com/czxcw/czxcw.github.io.git 第一次才使用此命令，让本地仓库和github仓库关联 - git add .//将所有文件都添加到暂存区,在public文件下使用 - git commit -m &amp;#34;提交信息&amp;#34;//将暂存区的文件提交到当前的分支 - git push -u origin master//将本地仓库推到远端的GitHub仓库上 如何更新博客和发布新的博客 - hugo new post/blog01.</description>
    </item>
    
  </channel>
</rss>
